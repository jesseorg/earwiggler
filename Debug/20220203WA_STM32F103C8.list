
20220203WA_STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080015e4  080015e4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080015e4  080015e4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080015e4  080015e4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015e4  080015e4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015e4  080015e4  000115e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015e8  080015e8  000115e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080015ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000008  080015f4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080015f4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005492  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001082  00000000  00000000  000254c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  00026548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  00026e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c539  00000000  00000000  00027720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005b6b  00000000  00000000  00033c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000413fe  00000000  00000000  000397c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007abc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002628  00000000  00000000  0007ac18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	080015cc 	.word	0x080015cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	080015cc 	.word	0x080015cc

0800014c <WWDG_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
}
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <PVD_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
 8000158:	b480      	push	{r7}
 800015a:	af00      	add	r7, sp, #0
}
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr

08000164 <TAMPER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr

08000170 <RTC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <FLASH_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <RCC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <EXTI0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <EXTI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <EXTI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
}
 80001b0:	bf00      	nop
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <EXTI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr

080001c4 <EXTI4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <DMA1_Channel1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <DMA1_Channel2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
}
 80001e0:	bf00      	nop
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr

080001e8 <DMA1_Channel3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <DMA1_Channel4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <DMA1_Channel5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <DMA1_Channel6_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr

08000218 <DMA1_Channel7_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <ADC1_2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void ADC1_2_IRQHandler(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr

08000230 <EXTI9_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <TIM1_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <TIM1_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr

08000254 <TIM1_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <TIM1_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <TIM2_IRQHandler>:

     }
}*/
//��stm32f10x_it.c�У������ҵ�����TIM2_IRQHandler()������������Ӵ���
void TIM2_IRQHandler(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
       u8 ReadValue;
       //����Ƿ�����������¼�
       if(TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 8000272:	2101      	movs	r1, #1
 8000274:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000278:	f001 f94a 	bl	8001510 <TIM_GetITStatus>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d016      	beq.n	80002b0 <TIM2_IRQHandler+0x44>
       {
              //���TIM2���жϴ�����λ
              TIM_ClearITPendingBit(TIM2 , TIM_FLAG_Update);
 8000282:	2101      	movs	r1, #1
 8000284:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000288:	f001 f96b 	bl	8001562 <TIM_ClearITPendingBit>
              //��PB.5�ܽ������ֵд��ReadValue
              ReadValue = GPIO_ReadOutputDataBit(GPIOB,GPIO_Pin_5);
 800028c:	2120      	movs	r1, #32
 800028e:	480a      	ldr	r0, [pc, #40]	; (80002b8 <TIM2_IRQHandler+0x4c>)
 8000290:	f000 fc5c 	bl	8000b4c <GPIO_ReadOutputDataBit>
 8000294:	4603      	mov	r3, r0
 8000296:	71fb      	strb	r3, [r7, #7]
              if(ReadValue == 0)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d104      	bne.n	80002a8 <TIM2_IRQHandler+0x3c>
              {
                     GPIO_SetBits(GPIOB,GPIO_Pin_5);
 800029e:	2120      	movs	r1, #32
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <TIM2_IRQHandler+0x4c>)
 80002a2:	f000 fc6c 	bl	8000b7e <GPIO_SetBits>
              }
       }
//	   TIMER_cfg();
//	   TIM_Cmd(TIM2,ENABLE);

}
 80002a6:	e003      	b.n	80002b0 <TIM2_IRQHandler+0x44>
                     GPIO_ResetBits(GPIOB,GPIO_Pin_5);      
 80002a8:	2120      	movs	r1, #32
 80002aa:	4803      	ldr	r0, [pc, #12]	; (80002b8 <TIM2_IRQHandler+0x4c>)
 80002ac:	f000 fc75 	bl	8000b9a <GPIO_ResetBits>
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40010c00 	.word	0x40010c00

080002bc <TIM3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <I2C1_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <I2C1_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <SPI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <USART1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <USART2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <EXTI15_10_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr

08000310 <USBWakeUp_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <TIMER_cfg>:
/******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/
void SysTickHandler(void)
{
}
void TIMER_cfg(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
       TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
       //���½�Timer����Ϊȱʡֵ
       TIM_DeInit(TIM2);
 8000322:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000326:	f000 fedf 	bl	80010e8 <TIM_DeInit>
       //�����ڲ�ʱ�Ӹ�TIM2�ṩʱ��Դ
       TIM_InternalClockConfig(TIM2);
 800032a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800032e:	f001 f8af 	bl	8001490 <TIM_InternalClockConfig>
       //Ԥ��Ƶϵ��Ϊ36000-1������������ʱ��Ϊ72MHz/36000 = 2kHz
       TIM_TimeBaseStructure.TIM_Prescaler = 50 - 1;
 8000332:	2331      	movs	r3, #49	; 0x31
 8000334:	80bb      	strh	r3, [r7, #4]
       //����ʱ�ӷָ�
       TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	817b      	strh	r3, [r7, #10]
       //���ü�����ģʽΪ���ϼ���ģʽ
       TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800033a:	2300      	movs	r3, #0
 800033c:	80fb      	strh	r3, [r7, #6]
       //���ü��������С��ÿ��2000�����Ͳ���һ�������¼�
       TIM_TimeBaseStructure.TIM_Period = 19 - 1;
 800033e:	2312      	movs	r3, #18
 8000340:	813b      	strh	r3, [r7, #8]
       //������Ӧ�õ�TIM2��
       TIM_TimeBaseInit(TIM2,&TIM_TimeBaseStructure);
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4619      	mov	r1, r3
 8000346:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800034a:	f000 ffe3 	bl	8001314 <TIM_TimeBaseInit>
       //�������жϱ�־
       TIM_ClearFlag(TIM2, TIM_FLAG_Update);
 800034e:	2101      	movs	r1, #1
 8000350:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000354:	f001 f8cc 	bl	80014f0 <TIM_ClearFlag>
      //��ֹARRԤװ�ػ�����
       TIM_ARRPreloadConfig(TIM2, DISABLE);
 8000358:	2100      	movs	r1, #0
 800035a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800035e:	f001 f8a8 	bl	80014b2 <TIM_ARRPreloadConfig>
       //����TIM2���ж�
       TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
 8000362:	2201      	movs	r2, #1
 8000364:	2101      	movs	r1, #1
 8000366:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800036a:	f001 f86e 	bl	800144a <TIM_ITConfig>
}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <delay_us>:
#include "stm32f10x.h"
#include "delay.h"

void delay_us(u32 n)
{
 8000376:	b480      	push	{r7}
 8000378:	b085      	sub	sp, #20
 800037a:	af00      	add	r7, sp, #0
 800037c:	6078      	str	r0, [r7, #4]
	u8 j;
	while(n--)
 800037e:	e008      	b.n	8000392 <delay_us+0x1c>
	for(j=0;j<10;j++);
 8000380:	2300      	movs	r3, #0
 8000382:	73fb      	strb	r3, [r7, #15]
 8000384:	e002      	b.n	800038c <delay_us+0x16>
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	3301      	adds	r3, #1
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	2b09      	cmp	r3, #9
 8000390:	d9f9      	bls.n	8000386 <delay_us+0x10>
	while(n--)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	1e5a      	subs	r2, r3, #1
 8000396:	607a      	str	r2, [r7, #4]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d1f1      	bne.n	8000380 <delay_us+0xa>
}
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <delay_ms>:
void delay_ms(u32 n)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	while(n--)
 80003b0:	e003      	b.n	80003ba <delay_ms+0x12>
	delay_us(1000);
 80003b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b6:	f7ff ffde 	bl	8000376 <delay_us>
	while(n--)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	1e5a      	subs	r2, r3, #1
 80003be:	607a      	str	r2, [r7, #4]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d1f6      	bne.n	80003b2 <delay_ms+0xa>
}
 80003c4:	bf00      	nop
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <RCC_cfg>:



void RCC_cfg(void)

{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b082      	sub	sp, #8
 80003d2:	af00      	add	r7, sp, #0

       //定义错误状态变量
       ErrorStatus HSEStartUpStatus;
       //将RCC寄存器重新设置为默认值
       RCC_DeInit();
 80003d4:	f000 fca6 	bl	8000d24 <RCC_DeInit>
       //打开外部高速时钟晶振
       RCC_HSEConfig(RCC_HSE_ON);
 80003d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003dc:	f000 fcd0 	bl	8000d80 <RCC_HSEConfig>
       //等待外部高速时钟晶振工作
       HSEStartUpStatus = RCC_WaitForHSEStartUp();
 80003e0:	f000 fcfc 	bl	8000ddc <RCC_WaitForHSEStartUp>
 80003e4:	4603      	mov	r3, r0
 80003e6:	71fb      	strb	r3, [r7, #7]
       if(HSEStartUpStatus == SUCCESS)
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d128      	bne.n	8000440 <RCC_cfg+0x72>
       {
              //设置AHB时钟(HCLK)为系统时钟
              RCC_HCLKConfig(RCC_SYSCLK_Div1);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f000 fd74 	bl	8000edc <RCC_HCLKConfig>
              //设置高速AHB时钟(APB2)为HCLK时钟
              RCC_PCLK2Config(RCC_HCLK_Div1);
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 fda9 	bl	8000f4c <RCC_PCLK2Config>
              //设置低速AHB时钟(APB1)为HCLK的2分频
              RCC_PCLK1Config(RCC_HCLK_Div2);
 80003fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80003fe:	f000 fd89 	bl	8000f14 <RCC_PCLK1Config>
              //设置FLASH代码延时
              FLASH_SetLatency(FLASH_Latency_2);
 8000402:	2002      	movs	r0, #2
 8000404:	f000 fab6 	bl	8000974 <FLASH_SetLatency>
              //使能预取指缓存
              FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8000408:	2010      	movs	r0, #16
 800040a:	f000 facb 	bl	80009a4 <FLASH_PrefetchBufferCmd>
              //设置PLL时钟，为HSE的9倍频 8MHz * 9 = 72MHz
              RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 800040e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000412:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000416:	f000 fd09 	bl	8000e2c <RCC_PLLConfig>
              //使能PLL
              RCC_PLLCmd(ENABLE);
 800041a:	2001      	movs	r0, #1
 800041c:	f000 fd24 	bl	8000e68 <RCC_PLLCmd>
              //等待PLL准备就绪
              while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 8000420:	bf00      	nop
 8000422:	2039      	movs	r0, #57	; 0x39
 8000424:	f000 fe26 	bl	8001074 <RCC_GetFlagStatus>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f9      	beq.n	8000422 <RCC_cfg+0x54>
              //设置PLL为系统时钟源
              RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800042e:	2002      	movs	r0, #2
 8000430:	f000 fd2a 	bl	8000e88 <RCC_SYSCLKConfig>
              //判断PLL是否是系统时钟
              while(RCC_GetSYSCLKSource() != 0x08);
 8000434:	bf00      	nop
 8000436:	f000 fd43 	bl	8000ec0 <RCC_GetSYSCLKSource>
 800043a:	4603      	mov	r3, r0
 800043c:	2b08      	cmp	r3, #8
 800043e:	d1fa      	bne.n	8000436 <RCC_cfg+0x68>
       }
       //允许TIM2的时钟
       RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 8000440:	2101      	movs	r1, #1
 8000442:	2001      	movs	r0, #1
 8000444:	f000 fdbc 	bl	8000fc0 <RCC_APB1PeriphClockCmd>
       //允许GPIO的时钟
       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
 8000448:	2101      	movs	r1, #1
 800044a:	2008      	movs	r0, #8
 800044c:	f000 fd9a 	bl	8000f84 <RCC_APB2PeriphClockCmd>





}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <NVIC_cfg>:


void NVIC_cfg(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
       NVIC_InitTypeDef NVIC_InitStructure;
        //选择中断分组1
        NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800045e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000462:	f000 fbbf 	bl	8000be4 <NVIC_PriorityGroupConfig>
        //选择TIM2的中断通道
        NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 8000466:	231c      	movs	r3, #28
 8000468:	713b      	strb	r3, [r7, #4]
        //抢占式中断优先级设置为0
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	717b      	strb	r3, [r7, #5]
       //响应式中断优先级设置为0
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	71bb      	strb	r3, [r7, #6]
       //使能中断
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000472:	2301      	movs	r3, #1
 8000474:	71fb      	strb	r3, [r7, #7]
        NVIC_Init(&NVIC_InitStructure);
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fbc5 	bl	8000c08 <NVIC_Init>
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <GPIO_cfg>:



void GPIO_cfg(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
       GPIO_InitTypeDef GPIO_InitStructure;
       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;                 //选择引脚
 800048e:	2320      	movs	r3, #32
 8000490:	80bb      	strh	r3, [r7, #4]
       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; //输出频率最大50MHz
 8000492:	2303      	movs	r3, #3
 8000494:	71bb      	strb	r3, [r7, #6]
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //带上拉电阻输出
 8000496:	2310      	movs	r3, #16
 8000498:	71fb      	strb	r3, [r7, #7]
       GPIO_Init(GPIOB,&GPIO_InitStructure);
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4619      	mov	r1, r3
 800049e:	4814      	ldr	r0, [pc, #80]	; (80004f0 <GPIO_cfg+0x68>)
 80004a0:	f000 fa98 	bl	80009d4 <GPIO_Init>

       //GPIO_InitTypeDef GPIO_InitStructure;
       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;                 //选择引脚
 80004a4:	2340      	movs	r3, #64	; 0x40
 80004a6:	80bb      	strh	r3, [r7, #4]
       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; //输出频率最大50MHz
 80004a8:	2303      	movs	r3, #3
 80004aa:	71bb      	strb	r3, [r7, #6]
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //带上拉电阻输出
 80004ac:	2310      	movs	r3, #16
 80004ae:	71fb      	strb	r3, [r7, #7]
       GPIO_Init(GPIOB,&GPIO_InitStructure);
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4619      	mov	r1, r3
 80004b4:	480e      	ldr	r0, [pc, #56]	; (80004f0 <GPIO_cfg+0x68>)
 80004b6:	f000 fa8d 	bl	80009d4 <GPIO_Init>

       //GPIO_InitTypeDef GPIO_InitStructure;
       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;                 //选择引脚
 80004ba:	2320      	movs	r3, #32
 80004bc:	80bb      	strh	r3, [r7, #4]
       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; //输出频率最大50MHz
 80004be:	2303      	movs	r3, #3
 80004c0:	71bb      	strb	r3, [r7, #6]
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //带上拉电阻输出
 80004c2:	2310      	movs	r3, #16
 80004c4:	71fb      	strb	r3, [r7, #7]
       GPIO_Init(GPIOA,&GPIO_InitStructure);
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	480a      	ldr	r0, [pc, #40]	; (80004f4 <GPIO_cfg+0x6c>)
 80004cc:	f000 fa82 	bl	80009d4 <GPIO_Init>

       //GPIO_InitTypeDef GPIO_InitStructure;
       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;                 //选择引脚
 80004d0:	2340      	movs	r3, #64	; 0x40
 80004d2:	80bb      	strh	r3, [r7, #4]
       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; //输出频率最大50MHz
 80004d4:	2303      	movs	r3, #3
 80004d6:	71bb      	strb	r3, [r7, #6]
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //带上拉电阻输出
 80004d8:	2310      	movs	r3, #16
 80004da:	71fb      	strb	r3, [r7, #7]
       GPIO_Init(GPIOA,&GPIO_InitStructure);
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	4619      	mov	r1, r3
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <GPIO_cfg+0x6c>)
 80004e2:	f000 fa77 	bl	80009d4 <GPIO_Init>


}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40010c00 	.word	0x40010c00
 80004f4:	40010800 	.word	0x40010800

080004f8 <main>:

int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0


	RCC_cfg();
 80004fc:	f7ff ff67 	bl	80003ce <RCC_cfg>
    NVIC_cfg();
 8000500:	f7ff ffaa 	bl	8000458 <NVIC_cfg>
    GPIO_cfg();
 8000504:	f7ff ffc0 	bl	8000488 <GPIO_cfg>
    TIMER_cfg();
 8000508:	f7ff ff08 	bl	800031c <TIMER_cfg>
	   //[4682 ,4711, 4681,0,4683,5876,5540,5611,5503]



	   //this doesn't work
	   fa = 0b11011000;
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <main+0xa4>)
 800050e:	22d8      	movs	r2, #216	; 0xd8
 8000510:	601a      	str	r2, [r3, #0]
	   fb = 0b00111101;
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <main+0xa8>)
 8000514:	223d      	movs	r2, #61	; 0x3d
 8000516:	601a      	str	r2, [r3, #0]
	   fa = 0xD8;//0b11011000;
 8000518:	4b20      	ldr	r3, [pc, #128]	; (800059c <main+0xa4>)
 800051a:	22d8      	movs	r2, #216	; 0xd8
 800051c:	601a      	str	r2, [r3, #0]
	   fb = 0x3D;//0b00111101;
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <main+0xa8>)
 8000520:	223d      	movs	r2, #61	; 0x3d
 8000522:	601a      	str	r2, [r3, #0]


	   fa = 255;// Group (address)
 8000524:	4b1d      	ldr	r3, [pc, #116]	; (800059c <main+0xa4>)
 8000526:	22ff      	movs	r2, #255	; 0xff
 8000528:	601a      	str	r2, [r3, #0]
	   fb = 0;// ID (person)
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <main+0xa8>)
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]



	   //works, make sure you start with Star_Submit.
	   Star_Submit();
 8000530:	f000 f83a 	bl	80005a8 <Star_Submit>

	   Serial_Submit();
 8000534:	f000 f870 	bl	8000618 <Serial_Submit>
	   // format 2 is star 1 is serial // obsolete?
	   Submit_Data( (int8_t) 3, (int8_t) 5, (int8_t) 1  );
 8000538:	2201      	movs	r2, #1
 800053a:	2105      	movs	r1, #5
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f8df 	bl	8000700 <Submit_Data>
	   // if you don't sent 'Star_Submit' first then
	   // this line does not work at this location
	   // but it work if you send 3/5 first
	   // this is because of the timing on the NEC receiver

	   Serial_Submit();
 8000542:	f000 f869 	bl	8000618 <Serial_Submit>
	   fa = 3 ^ 5;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <main+0xa4>)
 8000548:	2206      	movs	r2, #6
 800054a:	601a      	str	r2, [r3, #0]
	   fb = fa ^ 5;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <main+0xa4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f083 0305 	eor.w	r3, r3, #5
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <main+0xa8>)
 8000556:	6013      	str	r3, [r2, #0]
	   Submit_Data( fa, fb, (int8_t) 1  );
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <main+0xa4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <main+0xa8>)
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	b2d1      	uxtb	r1, r2
 8000564:	2201      	movs	r2, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f8ca 	bl	8000700 <Submit_Data>
	   Star_Submit();
 800056c:	f000 f81c 	bl	80005a8 <Star_Submit>


	   //works
	   GPIO_WriteBit(GPIOB,GPIO_Pin_5, Bit_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2120      	movs	r1, #32
 8000574:	480b      	ldr	r0, [pc, #44]	; (80005a4 <main+0xac>)
 8000576:	f000 fb1e 	bl	8000bb6 <GPIO_WriteBit>
	   // turn off the IR LED


	   //flash the indicator
	   delay_ms(250);
 800057a:	20fa      	movs	r0, #250	; 0xfa
 800057c:	f7ff ff14 	bl	80003a8 <delay_ms>
	   GPIO_WriteBit(GPIOB,GPIO_Pin_6, Bit_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2140      	movs	r1, #64	; 0x40
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <main+0xac>)
 8000586:	f000 fb16 	bl	8000bb6 <GPIO_WriteBit>
	   delay_ms(25);
 800058a:	2019      	movs	r0, #25
 800058c:	f7ff ff0c 	bl	80003a8 <delay_ms>
	   GPIO_WriteBit(GPIOB,GPIO_Pin_6, Bit_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <main+0xac>)
 8000596:	f000 fb0e 	bl	8000bb6 <GPIO_WriteBit>
	   fa = 0b11011000;
 800059a:	e7b7      	b.n	800050c <main+0x14>
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000004 	.word	0x20000004
 80005a4:	40010c00 	.word	0x40010c00

080005a8 <Star_Submit>:
#define GPIOuput GPIOB
#define GPIOPin GPIO_Pin_5


void Star_Submit(void)//发射引导码函数；9ms的低电平和一个4.5ms的高电平组成
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	 u8 ReadValue;
     ReadValue = GPIO_ReadOutputDataBit(GPIOuput,GPIOPin);
 80005ae:	2120      	movs	r1, #32
 80005b0:	4818      	ldr	r0, [pc, #96]	; (8000614 <Star_Submit+0x6c>)
 80005b2:	f000 facb 	bl	8000b4c <GPIO_ReadOutputDataBit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
     if(ReadValue == 0){
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d110      	bne.n	80005e2 <Star_Submit+0x3a>
		delay_ms(9);
 80005c0:	2009      	movs	r0, #9
 80005c2:	f7ff fef1 	bl	80003a8 <delay_ms>
 //       GPIO_SetBits(GPIOuput,GPIOPin);
        TIM_Cmd(TIM2,ENABLE);
 80005c6:	2101      	movs	r1, #1
 80005c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005cc:	f000 ff1e 	bl	800140c <TIM_Cmd>
		delay_ms(4.5);
 80005d0:	2004      	movs	r0, #4
 80005d2:	f7ff fee9 	bl	80003a8 <delay_ms>
		TIM_Cmd(TIM2,DISABLE);
 80005d6:	2100      	movs	r1, #0
 80005d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005dc:	f000 ff16 	bl	800140c <TIM_Cmd>
  //       GPIO_SetBits(GPIOuput,GPIOPin);
        TIM_Cmd(TIM2,ENABLE);
		delay_ms(4.5);
		TIM_Cmd(TIM2,DISABLE);
	 }
}
 80005e0:	e013      	b.n	800060a <Star_Submit+0x62>
		 GPIO_ResetBits(GPIOuput,GPIOPin);
 80005e2:	2120      	movs	r1, #32
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <Star_Submit+0x6c>)
 80005e6:	f000 fad8 	bl	8000b9a <GPIO_ResetBits>
         delay_ms(9);
 80005ea:	2009      	movs	r0, #9
 80005ec:	f7ff fedc 	bl	80003a8 <delay_ms>
        TIM_Cmd(TIM2,ENABLE);
 80005f0:	2101      	movs	r1, #1
 80005f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005f6:	f000 ff09 	bl	800140c <TIM_Cmd>
		delay_ms(4.5);
 80005fa:	2004      	movs	r0, #4
 80005fc:	f7ff fed4 	bl	80003a8 <delay_ms>
		TIM_Cmd(TIM2,DISABLE);
 8000600:	2100      	movs	r1, #0
 8000602:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000606:	f000 ff01 	bl	800140c <TIM_Cmd>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40010c00 	.word	0x40010c00

08000618 <Serial_Submit>:
/*
 *
 * This is timed to be a serial signal.
 * it is not NEC format.*/
void Serial_Submit(void)//���������뺯����9ms�ĵ͵�ƽ��һ��4.5ms�ĸߵ�ƽ���
{   
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	 u8 ReadValue;
     ReadValue = GPIO_ReadOutputDataBit(GPIOuput,GPIOPin);
 800061e:	2120      	movs	r1, #32
 8000620:	481a      	ldr	r0, [pc, #104]	; (800068c <Serial_Submit+0x74>)
 8000622:	f000 fa93 	bl	8000b4c <GPIO_ReadOutputDataBit>
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
     if(ReadValue == 0){
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d112      	bne.n	8000656 <Serial_Submit+0x3e>
		delay_us(2000);
 8000630:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000634:	f7ff fe9f 	bl	8000376 <delay_us>
			 	TIM_Cmd(TIM2,ENABLE);
 8000638:	2101      	movs	r1, #1
 800063a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800063e:	f000 fee5 	bl	800140c <TIM_Cmd>
     //   GPIO_SetBits(GPIOuput,GPIOPin); //202202041313
		delay_us(1000);
 8000642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000646:	f7ff fe96 	bl	8000376 <delay_us>
			 	 	TIM_Cmd(TIM2,DISABLE);
 800064a:	2100      	movs	r1, #0
 800064c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000650:	f000 fedc 	bl	800140c <TIM_Cmd>
	 		// GPIO_SetBits(GPIOuput,GPIOPin); //202202041313
		delay_us(1000);		
			 	 	TIM_Cmd(TIM2,DISABLE);
	 }

}
 8000654:	e015      	b.n	8000682 <Serial_Submit+0x6a>
		 GPIO_ResetBits(GPIOuput,GPIOPin);    
 8000656:	2120      	movs	r1, #32
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <Serial_Submit+0x74>)
 800065a:	f000 fa9e 	bl	8000b9a <GPIO_ResetBits>
         delay_us(2000);
 800065e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000662:	f7ff fe88 	bl	8000376 <delay_us>
			 	TIM_Cmd(TIM2,ENABLE);
 8000666:	2101      	movs	r1, #1
 8000668:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800066c:	f000 fece 	bl	800140c <TIM_Cmd>
		delay_us(1000);		
 8000670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000674:	f7ff fe7f 	bl	8000376 <delay_us>
			 	 	TIM_Cmd(TIM2,DISABLE);
 8000678:	2100      	movs	r1, #0
 800067a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800067e:	f000 fec5 	bl	800140c <TIM_Cmd>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40010c00 	.word	0x40010c00

08000690 <Submit_Code_Zero>:


void Submit_Code_Zero(void)  //����һλ0��
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	GPIO_ResetBits(GPIOuput,GPIOPin);  
 8000694:	2120      	movs	r1, #32
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <Submit_Code_Zero+0x34>)
 8000698:	f000 fa7f 	bl	8000b9a <GPIO_ResetBits>
	delay_us(560);//560us��
 800069c:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006a0:	f7ff fe69 	bl	8000376 <delay_us>
	TIM_Cmd(TIM2,ENABLE);
 80006a4:	2101      	movs	r1, #1
 80006a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006aa:	f000 feaf 	bl	800140c <TIM_Cmd>
	delay_us(560);//560us��
 80006ae:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006b2:	f7ff fe60 	bl	8000376 <delay_us>
	TIM_Cmd(TIM2,DISABLE);
 80006b6:	2100      	movs	r1, #0
 80006b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006bc:	f000 fea6 	bl	800140c <TIM_Cmd>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40010c00 	.word	0x40010c00

080006c8 <Submit_Code_One>:
void Submit_Code_One(void)  //����һλ1��
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	GPIO_ResetBits(GPIOuput,GPIOPin);  
 80006cc:	2120      	movs	r1, #32
 80006ce:	480b      	ldr	r0, [pc, #44]	; (80006fc <Submit_Code_One+0x34>)
 80006d0:	f000 fa63 	bl	8000b9a <GPIO_ResetBits>
	delay_us(560);//560us��
 80006d4:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006d8:	f7ff fe4d 	bl	8000376 <delay_us>
	TIM_Cmd(TIM2,ENABLE);
 80006dc:	2101      	movs	r1, #1
 80006de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006e2:	f000 fe93 	bl	800140c <TIM_Cmd>
	delay_us(1680);//1680us��
 80006e6:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 80006ea:	f7ff fe44 	bl	8000376 <delay_us>
	TIM_Cmd(TIM2,DISABLE);
 80006ee:	2100      	movs	r1, #0
 80006f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006f4:	f000 fe8a 	bl	800140c <TIM_Cmd>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40010c00 	.word	0x40010c00

08000700 <Submit_Data>:
        }
}*/

void  Submit_Data(u8 addr,u8 data, u8 format )
//void  Submit_Data(u8 addr,u32 data)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	460b      	mov	r3, r1
 800070c:	71bb      	strb	r3, [r7, #6]
 800070e:	4613      	mov	r3, r2
 8000710:	717b      	strb	r3, [r7, #5]
	
	u8 addr_count;
	u8 addr_buff=0,data_flag=0;
 8000712:	2300      	movs	r3, #0
 8000714:	75bb      	strb	r3, [r7, #22]
 8000716:	2300      	movs	r3, #0
 8000718:	757b      	strb	r3, [r7, #21]
	u32 data_buff32=0;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
	u8 data_buff=0;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
	TIM_Cmd(TIM2,DISABLE);
 8000722:	2100      	movs	r1, #0
 8000724:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000728:	f000 fe70 	bl	800140c <TIM_Cmd>
		Serial_Submit();
		}
*/


	addr_buff=addr;
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	75bb      	strb	r3, [r7, #22]
	for(addr_count=8;addr_count>0;addr_count--)    //���͵�ַ��
 8000730:	2308      	movs	r3, #8
 8000732:	75fb      	strb	r3, [r7, #23]
 8000734:	e016      	b.n	8000764 <Submit_Data+0x64>
	{
		data_flag=(addr_buff>>(addr_count-1))&0x01;
 8000736:	7dba      	ldrb	r2, [r7, #22]
 8000738:	7dfb      	ldrb	r3, [r7, #23]
 800073a:	3b01      	subs	r3, #1
 800073c:	fa42 f303 	asr.w	r3, r2, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	757b      	strb	r3, [r7, #21]
		if(data_flag==0) Submit_Code_Zero();
 8000748:	7d7b      	ldrb	r3, [r7, #21]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d102      	bne.n	8000754 <Submit_Data+0x54>
 800074e:	f7ff ff9f 	bl	8000690 <Submit_Code_Zero>
 8000752:	e004      	b.n	800075e <Submit_Data+0x5e>
		else if(data_flag==1) Submit_Code_One();
 8000754:	7d7b      	ldrb	r3, [r7, #21]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d101      	bne.n	800075e <Submit_Data+0x5e>
 800075a:	f7ff ffb5 	bl	80006c8 <Submit_Code_One>
	for(addr_count=8;addr_count>0;addr_count--)    //���͵�ַ��
 800075e:	7dfb      	ldrb	r3, [r7, #23]
 8000760:	3b01      	subs	r3, #1
 8000762:	75fb      	strb	r3, [r7, #23]
 8000764:	7dfb      	ldrb	r3, [r7, #23]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1e5      	bne.n	8000736 <Submit_Data+0x36>
	}

	addr_buff=data;
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	75bb      	strb	r3, [r7, #22]
	for(addr_count=8;addr_count>0;addr_count--)    //���͵�ַ����
 800076e:	2308      	movs	r3, #8
 8000770:	75fb      	strb	r3, [r7, #23]
 8000772:	e016      	b.n	80007a2 <Submit_Data+0xa2>
	{
		data_flag=(addr_buff>>(addr_count-1))&0x01;
 8000774:	7dba      	ldrb	r2, [r7, #22]
 8000776:	7dfb      	ldrb	r3, [r7, #23]
 8000778:	3b01      	subs	r3, #1
 800077a:	fa42 f303 	asr.w	r3, r2, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	757b      	strb	r3, [r7, #21]
		if(data_flag==0) Submit_Code_Zero();
 8000786:	7d7b      	ldrb	r3, [r7, #21]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <Submit_Data+0x92>
 800078c:	f7ff ff80 	bl	8000690 <Submit_Code_Zero>
 8000790:	e004      	b.n	800079c <Submit_Data+0x9c>
		else if(data_flag==1) Submit_Code_One();
 8000792:	7d7b      	ldrb	r3, [r7, #21]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d101      	bne.n	800079c <Submit_Data+0x9c>
 8000798:	f7ff ff96 	bl	80006c8 <Submit_Code_One>
	for(addr_count=8;addr_count>0;addr_count--)    //���͵�ַ����
 800079c:	7dfb      	ldrb	r3, [r7, #23]
 800079e:	3b01      	subs	r3, #1
 80007a0:	75fb      	strb	r3, [r7, #23]
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1e5      	bne.n	8000774 <Submit_Data+0x74>
		data_flag=(data_buff>>(addr_count-1))&0x01;
		if(data_flag==0) Submit_Code_Zero();
		else if(data_flag==1) Submit_Code_One();
	}
	*/
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	; (80007f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007da:	f000 f811 	bl	8000800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007de:	f000 fed1 	bl	8001584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff fe89 	bl	80004f8 <main>
  bx lr
 80007e6:	4770      	bx	lr
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80007f0:	080015ec 	.word	0x080015ec
  ldr r2, =_sbss
 80007f4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80007f8:	20000024 	.word	0x20000024

080007fc <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <BusFault_Handler>
	...

08000800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <SystemInit+0x5c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <SystemInit+0x5c>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <SystemInit+0x5c>)
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	4911      	ldr	r1, [pc, #68]	; (800085c <SystemInit+0x5c>)
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <SystemInit+0x60>)
 8000818:	4013      	ands	r3, r2
 800081a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <SystemInit+0x5c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <SystemInit+0x5c>)
 8000822:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800082a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <SystemInit+0x5c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <SystemInit+0x5c>)
 8000832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000836:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <SystemInit+0x5c>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	4a07      	ldr	r2, [pc, #28]	; (800085c <SystemInit+0x5c>)
 800083e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000842:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <SystemInit+0x5c>)
 8000846:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800084a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800084c:	f000 f80c 	bl	8000868 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <SystemInit+0x64>)
 8000852:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000856:	609a      	str	r2, [r3, #8]
#endif 
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	f8ff0000 	.word	0xf8ff0000
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800086c:	f000 f802 	bl	8000874 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000882:	4b3a      	ldr	r3, [pc, #232]	; (800096c <SetSysClockTo72+0xf8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a39      	ldr	r2, [pc, #228]	; (800096c <SetSysClockTo72+0xf8>)
 8000888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800088c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <SetSysClockTo72+0xf8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3301      	adds	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d103      	bne.n	80008ac <SetSysClockTo72+0x38>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80008aa:	d1f0      	bne.n	800088e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80008ac:	4b2f      	ldr	r3, [pc, #188]	; (800096c <SetSysClockTo72+0xf8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80008b8:	2301      	movs	r3, #1
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	e001      	b.n	80008c2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d14b      	bne.n	8000960 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <SetSysClockTo72+0xfc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a28      	ldr	r2, [pc, #160]	; (8000970 <SetSysClockTo72+0xfc>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <SetSysClockTo72+0xfc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a25      	ldr	r2, [pc, #148]	; (8000970 <SetSysClockTo72+0xfc>)
 80008da:	f023 0303 	bic.w	r3, r3, #3
 80008de:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <SetSysClockTo72+0xfc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a22      	ldr	r2, [pc, #136]	; (8000970 <SetSysClockTo72+0xfc>)
 80008e6:	f043 0302 	orr.w	r3, r3, #2
 80008ea:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <SetSysClockTo72+0xf8>)
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <SetSysClockTo72+0xf8>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <SetSysClockTo72+0xf8>)
 80008f6:	4a1d      	ldr	r2, [pc, #116]	; (800096c <SetSysClockTo72+0xf8>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <SetSysClockTo72+0xf8>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	4a1a      	ldr	r2, [pc, #104]	; (800096c <SetSysClockTo72+0xf8>)
 8000902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000906:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <SetSysClockTo72+0xf8>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <SetSysClockTo72+0xf8>)
 800090e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000912:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <SetSysClockTo72+0xf8>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <SetSysClockTo72+0xf8>)
 800091a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800091e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <SetSysClockTo72+0xf8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a11      	ldr	r2, [pc, #68]	; (800096c <SetSysClockTo72+0xf8>)
 8000926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800092a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800092c:	bf00      	nop
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <SetSysClockTo72+0xf8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000936:	2b00      	cmp	r3, #0
 8000938:	d0f9      	beq.n	800092e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <SetSysClockTo72+0xf8>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <SetSysClockTo72+0xf8>)
 8000940:	f023 0303 	bic.w	r3, r3, #3
 8000944:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <SetSysClockTo72+0xf8>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <SetSysClockTo72+0xf8>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000952:	bf00      	nop
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <SetSysClockTo72+0xf8>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 030c 	and.w	r3, r3, #12
 800095c:	2b08      	cmp	r3, #8
 800095e:	d1f9      	bne.n	8000954 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	40022000 	.word	0x40022000

08000974 <FLASH_SetLatency>:
*                       - FLASH_Latency_2: FLASH Two Latency cycles
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_SetLatency(u32 FLASH_Latency)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <FLASH_SetLatency+0x2c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <FLASH_SetLatency+0x2c>)
 8000982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000986:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_Latency;
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <FLASH_SetLatency+0x2c>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4904      	ldr	r1, [pc, #16]	; (80009a0 <FLASH_SetLatency+0x2c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4313      	orrs	r3, r2
 8000992:	600b      	str	r3, [r1, #0]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <FLASH_PrefetchBufferCmd>:
*                       - FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_PrefetchBufferCmd(u32 FLASH_PrefetchBuffer)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <FLASH_PrefetchBufferCmd+0x2c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <FLASH_PrefetchBufferCmd+0x2c>)
 80009b2:	f023 0310 	bic.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <FLASH_PrefetchBufferCmd+0x2c>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4904      	ldr	r1, [pc, #16]	; (80009d0 <FLASH_PrefetchBufferCmd+0x2c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	600b      	str	r3, [r1, #0]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40022000 	.word	0x40022000

080009d4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b089      	sub	sp, #36	; 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	78db      	ldrb	r3, [r3, #3]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	78db      	ldrb	r3, [r3, #3]
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d005      	beq.n	8000a18 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	789b      	ldrb	r3, [r3, #2]
 8000a10:	461a      	mov	r2, r3
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d044      	beq.n	8000aac <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	e038      	b.n	8000aa0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000a2e:	2201      	movs	r2, #1
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d126      	bne.n	8000a9a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000a52:	220f      	movs	r2, #15
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	4013      	ands	r3, r2
 8000a64:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	78db      	ldrb	r3, [r3, #3]
 8000a78:	2b28      	cmp	r3, #40	; 0x28
 8000a7a:	d105      	bne.n	8000a88 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	409a      	lsls	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	e008      	b.n	8000a9a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	78db      	ldrb	r3, [r3, #3]
 8000a8c:	2b48      	cmp	r3, #72	; 0x48
 8000a8e:	d104      	bne.n	8000a9a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000a90:	2201      	movs	r2, #1
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	409a      	lsls	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	2b07      	cmp	r3, #7
 8000aa4:	d9c3      	bls.n	8000a2e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	2bff      	cmp	r3, #255	; 0xff
 8000ab2:	d946      	bls.n	8000b42 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	e03a      	b.n	8000b36 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	3308      	adds	r3, #8
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d127      	bne.n	8000b30 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	4013      	ands	r3, r2
 8000af8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000afa:	69fa      	ldr	r2, [r7, #28]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	78db      	ldrb	r3, [r3, #3]
 8000b0c:	2b28      	cmp	r3, #40	; 0x28
 8000b0e:	d105      	bne.n	8000b1c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	3308      	adds	r3, #8
 8000b14:	2201      	movs	r2, #1
 8000b16:	409a      	lsls	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	2b48      	cmp	r3, #72	; 0x48
 8000b22:	d105      	bne.n	8000b30 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	3308      	adds	r3, #8
 8000b28:	2201      	movs	r2, #1
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	3301      	adds	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	d9c1      	bls.n	8000ac0 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	605a      	str	r2, [r3, #4]
  }
}
 8000b42:	bf00      	nop
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e001      	b.n	8000b72 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	611a      	str	r2, [r3, #16]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	615a      	str	r2, [r3, #20]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr

08000bb6 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	807b      	strh	r3, [r7, #2]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000bc6:	787b      	ldrb	r3, [r7, #1]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bcc:	887a      	ldrh	r2, [r7, #2]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000bd2:	e002      	b.n	8000bda <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8000bd4:	887a      	ldrh	r2, [r7, #2]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	615a      	str	r2, [r3, #20]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <NVIC_PriorityGroupConfig>:
*                         0 bits for subpriority
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_PriorityGroupConfig(u32 NVIC_PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <NVIC_PriorityGroupConfig+0x20>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	60d3      	str	r3, [r2, #12]
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_Init>:
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  u32 tmppriority = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  u32 tmppre = 0, tmpsub = 0x0F;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	230f      	movs	r3, #15
 8000c22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	78db      	ldrb	r3, [r3, #3]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d062      	beq.n	8000cf2 <NVIC_Init+0xea>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8000c2c:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <NVIC_Init+0x114>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	61fb      	str	r3, [r7, #28]
    tmppre = (0x4 - tmppriority);
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	f1c3 0304 	rsb	r3, r3, #4
 8000c40:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4a:	60fb      	str	r3, [r7, #12]
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	461a      	mov	r2, r3
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	61fb      	str	r3, [r7, #28]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	789b      	ldrb	r3, [r3, #2]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4013      	ands	r3, r2
 8000c64:	69fa      	ldr	r2, [r7, #28]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61fb      	str	r3, [r7, #28]

    tmppriority = tmppriority << 0x04;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	61fb      	str	r3, [r7, #28]
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	61fb      	str	r3, [r7, #28]
    
    tmpreg = NVIC->ISPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8000c82:	4a27      	ldr	r2, [pc, #156]	; (8000d20 <NVIC_Init+0x118>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	089b      	lsrs	r3, r3, #2
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	3340      	adds	r3, #64	; 0x40
 8000c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c92:	61bb      	str	r3, [r7, #24]
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	22ff      	movs	r2, #255	; 0xff
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	617b      	str	r3, [r7, #20]
    tmpreg &= ~tmpmask;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
    tmppriority &= tmpmask;  
 8000cb0:	69fa      	ldr	r2, [r7, #28]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61fb      	str	r3, [r7, #28]
    tmpreg |= tmppriority;
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]

    NVIC->ISPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8000cc0:	4917      	ldr	r1, [pc, #92]	; (8000d20 <NVIC_Init+0x118>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	3340      	adds	r3, #64	; 0x40
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000cda:	4911      	ldr	r1, [pc, #68]	; (8000d20 <NVIC_Init+0x118>)
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	7812      	ldrb	r2, [r2, #0]
 8000ce0:	0952      	lsrs	r2, r2, #5
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	4610      	mov	r0, r2
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000cec:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
}
 8000cf0:	e00f      	b.n	8000d12 <NVIC_Init+0x10a>
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000cfa:	4909      	ldr	r1, [pc, #36]	; (8000d20 <NVIC_Init+0x118>)
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	0952      	lsrs	r2, r2, #5
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	4610      	mov	r0, r2
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000d06:	2201      	movs	r2, #1
 8000d08:	409a      	lsls	r2, r3
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000d0a:	f100 0320 	add.w	r3, r0, #32
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d12:	bf00      	nop
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <RCC_DeInit+0x54>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <RCC_DeInit+0x54>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <RCC_DeInit+0x54>)
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	490f      	ldr	r1, [pc, #60]	; (8000d78 <RCC_DeInit+0x54>)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <RCC_DeInit+0x58>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <RCC_DeInit+0x54>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <RCC_DeInit+0x54>)
 8000d46:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <RCC_DeInit+0x54>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <RCC_DeInit+0x54>)
 8000d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <RCC_DeInit+0x54>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <RCC_DeInit+0x54>)
 8000d62:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000d66:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <RCC_DeInit+0x54>)
 8000d6a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d6e:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	f8ff0000 	.word	0xf8ff0000

08000d80 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <RCC_HSEConfig+0x58>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <RCC_HSEConfig+0x58>)
 8000d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <RCC_HSEConfig+0x58>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <RCC_HSEConfig+0x58>)
 8000d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9e:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da6:	d004      	beq.n	8000db2 <RCC_HSEConfig+0x32>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000dae:	d007      	beq.n	8000dc0 <RCC_HSEConfig+0x40>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8000db0:	e00d      	b.n	8000dce <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEON_Set;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <RCC_HSEConfig+0x58>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <RCC_HSEConfig+0x58>)
 8000db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dbc:	6013      	str	r3, [r2, #0]
      break;
 8000dbe:	e006      	b.n	8000dce <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <RCC_HSEConfig+0x58>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <RCC_HSEConfig+0x58>)
 8000dc6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000dca:	6013      	str	r3, [r2, #0]
      break;
 8000dcc:	bf00      	nop
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	40021000 	.word	0x40021000

08000ddc <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000de6:	2300      	movs	r3, #0
 8000de8:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000dee:	2031      	movs	r0, #49	; 0x31
 8000df0:	f000 f940 	bl	8001074 <RCC_GetFlagStatus>
 8000df4:	4603      	mov	r3, r0
 8000df6:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e04:	d002      	beq.n	8000e0c <RCC_WaitForHSEStartUp+0x30>
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f0      	beq.n	8000dee <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000e0c:	2031      	movs	r0, #49	; 0x31
 8000e0e:	f000 f931 	bl	8001074 <RCC_GetFlagStatus>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	e001      	b.n	8000e22 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <RCC_PLLConfig+0x38>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000e46:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000e54:	4a03      	ldr	r2, [pc, #12]	; (8000e64 <RCC_PLLConfig+0x38>)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6053      	str	r3, [r2, #4]
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000

08000e68 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <RCC_PLLCmd+0x1c>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	42420060 	.word	0x42420060

08000e88 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <RCC_SYSCLKConfig+0x34>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f023 0303 	bic.w	r3, r3, #3
 8000ea0:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <RCC_SYSCLKConfig+0x34>)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6053      	str	r3, [r2, #4]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <RCC_GetSYSCLKSource+0x18>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	b2db      	uxtb	r3, r3
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40021000 	.word	0x40021000

08000edc <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <RCC_HCLKConfig+0x34>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ef4:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <RCC_HCLKConfig+0x34>)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6053      	str	r3, [r2, #4]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <RCC_PCLK1Config+0x34>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f2c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <RCC_PCLK1Config+0x34>)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6053      	str	r3, [r2, #4]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <RCC_PCLK2Config+0x34>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f64:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000f70:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <RCC_PCLK2Config+0x34>)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6053      	str	r3, [r2, #4]
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000

08000f84 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <RCC_APB2PeriphClockCmd+0x38>)
 8000f98:	699a      	ldr	r2, [r3, #24]
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <RCC_APB2PeriphClockCmd+0x38>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000fa2:	e006      	b.n	8000fb2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <RCC_APB2PeriphClockCmd+0x38>)
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4903      	ldr	r1, [pc, #12]	; (8000fbc <RCC_APB2PeriphClockCmd+0x38>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	618b      	str	r3, [r1, #24]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d006      	beq.n	8000fe0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <RCC_APB1PeriphClockCmd+0x38>)
 8000fd4:	69da      	ldr	r2, [r3, #28]
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <RCC_APB1PeriphClockCmd+0x38>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000fde:	e006      	b.n	8000fee <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <RCC_APB1PeriphClockCmd+0x38>)
 8000fe2:	69da      	ldr	r2, [r3, #28]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	4903      	ldr	r1, [pc, #12]	; (8000ff8 <RCC_APB1PeriphClockCmd+0x38>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	61cb      	str	r3, [r1, #28]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000

08000ffc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <RCC_APB2PeriphResetCmd+0x38>)
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <RCC_APB2PeriphResetCmd+0x38>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4313      	orrs	r3, r2
 8001018:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800101a:	e006      	b.n	800102a <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <RCC_APB2PeriphResetCmd+0x38>)
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	43db      	mvns	r3, r3
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <RCC_APB2PeriphResetCmd+0x38>)
 8001026:	4013      	ands	r3, r2
 8001028:	60cb      	str	r3, [r1, #12]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40021000 	.word	0x40021000

08001038 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <RCC_APB1PeriphResetCmd+0x38>)
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <RCC_APB1PeriphResetCmd+0x38>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001056:	e006      	b.n	8001066 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <RCC_APB1PeriphResetCmd+0x38>)
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	43db      	mvns	r3, r3
 8001060:	4903      	ldr	r1, [pc, #12]	; (8001070 <RCC_APB1PeriphResetCmd+0x38>)
 8001062:	4013      	ands	r3, r2
 8001064:	610b      	str	r3, [r1, #16]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000

08001074 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	095b      	lsrs	r3, r3, #5
 800108e:	b2db      	uxtb	r3, r3
 8001090:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d103      	bne.n	80010a0 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <RCC_GetFlagStatus+0x70>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e009      	b.n	80010b4 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d103      	bne.n	80010ae <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <RCC_GetFlagStatus+0x70>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e002      	b.n	80010b4 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <RCC_GetFlagStatus+0x70>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	fa22 f303 	lsr.w	r3, r2, r3
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80010cc:	2301      	movs	r3, #1
 80010ce:	74fb      	strb	r3, [r7, #19]
 80010d0:	e001      	b.n	80010d6 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80010d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a78      	ldr	r2, [pc, #480]	; (80012d4 <TIM_DeInit+0x1ec>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d10a      	bne.n	800110e <TIM_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80010f8:	2101      	movs	r1, #1
 80010fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010fe:	f7ff ff7d 	bl	8000ffc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001102:	2100      	movs	r1, #0
 8001104:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001108:	f7ff ff78 	bl	8000ffc <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
}
 800110c:	e0de      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM2)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001114:	d108      	bne.n	8001128 <TIM_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001116:	2101      	movs	r1, #1
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff ff8d 	bl	8001038 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800111e:	2100      	movs	r1, #0
 8001120:	2001      	movs	r0, #1
 8001122:	f7ff ff89 	bl	8001038 <RCC_APB1PeriphResetCmd>
}
 8001126:	e0d1      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM3)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a6b      	ldr	r2, [pc, #428]	; (80012d8 <TIM_DeInit+0x1f0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d108      	bne.n	8001142 <TIM_DeInit+0x5a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001130:	2101      	movs	r1, #1
 8001132:	2002      	movs	r0, #2
 8001134:	f7ff ff80 	bl	8001038 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001138:	2100      	movs	r1, #0
 800113a:	2002      	movs	r0, #2
 800113c:	f7ff ff7c 	bl	8001038 <RCC_APB1PeriphResetCmd>
}
 8001140:	e0c4      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM4)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a65      	ldr	r2, [pc, #404]	; (80012dc <TIM_DeInit+0x1f4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d108      	bne.n	800115c <TIM_DeInit+0x74>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800114a:	2101      	movs	r1, #1
 800114c:	2004      	movs	r0, #4
 800114e:	f7ff ff73 	bl	8001038 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001152:	2100      	movs	r1, #0
 8001154:	2004      	movs	r0, #4
 8001156:	f7ff ff6f 	bl	8001038 <RCC_APB1PeriphResetCmd>
}
 800115a:	e0b7      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM5)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a60      	ldr	r2, [pc, #384]	; (80012e0 <TIM_DeInit+0x1f8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d108      	bne.n	8001176 <TIM_DeInit+0x8e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001164:	2101      	movs	r1, #1
 8001166:	2008      	movs	r0, #8
 8001168:	f7ff ff66 	bl	8001038 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800116c:	2100      	movs	r1, #0
 800116e:	2008      	movs	r0, #8
 8001170:	f7ff ff62 	bl	8001038 <RCC_APB1PeriphResetCmd>
}
 8001174:	e0aa      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM6)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a5a      	ldr	r2, [pc, #360]	; (80012e4 <TIM_DeInit+0x1fc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d108      	bne.n	8001190 <TIM_DeInit+0xa8>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800117e:	2101      	movs	r1, #1
 8001180:	2010      	movs	r0, #16
 8001182:	f7ff ff59 	bl	8001038 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001186:	2100      	movs	r1, #0
 8001188:	2010      	movs	r0, #16
 800118a:	f7ff ff55 	bl	8001038 <RCC_APB1PeriphResetCmd>
}
 800118e:	e09d      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM7)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a55      	ldr	r2, [pc, #340]	; (80012e8 <TIM_DeInit+0x200>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d108      	bne.n	80011aa <TIM_DeInit+0xc2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001198:	2101      	movs	r1, #1
 800119a:	2020      	movs	r0, #32
 800119c:	f7ff ff4c 	bl	8001038 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80011a0:	2100      	movs	r1, #0
 80011a2:	2020      	movs	r0, #32
 80011a4:	f7ff ff48 	bl	8001038 <RCC_APB1PeriphResetCmd>
}
 80011a8:	e090      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM8)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <TIM_DeInit+0x204>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10a      	bne.n	80011c8 <TIM_DeInit+0xe0>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80011b2:	2101      	movs	r1, #1
 80011b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011b8:	f7ff ff20 	bl	8000ffc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 80011bc:	2100      	movs	r1, #0
 80011be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011c2:	f7ff ff1b 	bl	8000ffc <RCC_APB2PeriphResetCmd>
}
 80011c6:	e081      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM9)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a49      	ldr	r2, [pc, #292]	; (80012f0 <TIM_DeInit+0x208>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d10a      	bne.n	80011e6 <TIM_DeInit+0xfe>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80011d0:	2101      	movs	r1, #1
 80011d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011d6:	f7ff ff11 	bl	8000ffc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80011da:	2100      	movs	r1, #0
 80011dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011e0:	f7ff ff0c 	bl	8000ffc <RCC_APB2PeriphResetCmd>
}
 80011e4:	e072      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM10)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a42      	ldr	r2, [pc, #264]	; (80012f4 <TIM_DeInit+0x20c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10a      	bne.n	8001204 <TIM_DeInit+0x11c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80011ee:	2101      	movs	r1, #1
 80011f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80011f4:	f7ff ff02 	bl	8000ffc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80011f8:	2100      	movs	r1, #0
 80011fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80011fe:	f7ff fefd 	bl	8000ffc <RCC_APB2PeriphResetCmd>
}
 8001202:	e063      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM11) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a3c      	ldr	r2, [pc, #240]	; (80012f8 <TIM_DeInit+0x210>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d10a      	bne.n	8001222 <TIM_DeInit+0x13a>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800120c:	2101      	movs	r1, #1
 800120e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001212:	f7ff fef3 	bl	8000ffc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001216:	2100      	movs	r1, #0
 8001218:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800121c:	f7ff feee 	bl	8000ffc <RCC_APB2PeriphResetCmd>
}
 8001220:	e054      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM12)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a35      	ldr	r2, [pc, #212]	; (80012fc <TIM_DeInit+0x214>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d108      	bne.n	800123c <TIM_DeInit+0x154>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800122a:	2101      	movs	r1, #1
 800122c:	2040      	movs	r0, #64	; 0x40
 800122e:	f7ff ff03 	bl	8001038 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001232:	2100      	movs	r1, #0
 8001234:	2040      	movs	r0, #64	; 0x40
 8001236:	f7ff feff 	bl	8001038 <RCC_APB1PeriphResetCmd>
}
 800123a:	e047      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM13) 
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a30      	ldr	r2, [pc, #192]	; (8001300 <TIM_DeInit+0x218>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d108      	bne.n	8001256 <TIM_DeInit+0x16e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001244:	2101      	movs	r1, #1
 8001246:	2080      	movs	r0, #128	; 0x80
 8001248:	f7ff fef6 	bl	8001038 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800124c:	2100      	movs	r1, #0
 800124e:	2080      	movs	r0, #128	; 0x80
 8001250:	f7ff fef2 	bl	8001038 <RCC_APB1PeriphResetCmd>
}
 8001254:	e03a      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM14) 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <TIM_DeInit+0x21c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d10a      	bne.n	8001274 <TIM_DeInit+0x18c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800125e:	2101      	movs	r1, #1
 8001260:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001264:	f7ff fee8 	bl	8001038 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8001268:	2100      	movs	r1, #0
 800126a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800126e:	f7ff fee3 	bl	8001038 <RCC_APB1PeriphResetCmd>
}
 8001272:	e02b      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM15)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a24      	ldr	r2, [pc, #144]	; (8001308 <TIM_DeInit+0x220>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d10a      	bne.n	8001292 <TIM_DeInit+0x1aa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 800127c:	2101      	movs	r1, #1
 800127e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001282:	f7ff febb 	bl	8000ffc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 8001286:	2100      	movs	r1, #0
 8001288:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800128c:	f7ff feb6 	bl	8000ffc <RCC_APB2PeriphResetCmd>
}
 8001290:	e01c      	b.n	80012cc <TIM_DeInit+0x1e4>
  else if (TIMx == TIM16)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <TIM_DeInit+0x224>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d10a      	bne.n	80012b0 <TIM_DeInit+0x1c8>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 800129a:	2101      	movs	r1, #1
 800129c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012a0:	f7ff feac 	bl	8000ffc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 80012a4:	2100      	movs	r1, #0
 80012a6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012aa:	f7ff fea7 	bl	8000ffc <RCC_APB2PeriphResetCmd>
}
 80012ae:	e00d      	b.n	80012cc <TIM_DeInit+0x1e4>
    if (TIMx == TIM17)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <TIM_DeInit+0x228>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d109      	bne.n	80012cc <TIM_DeInit+0x1e4>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 80012b8:	2101      	movs	r1, #1
 80012ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80012be:	f7ff fe9d 	bl	8000ffc <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 80012c2:	2100      	movs	r1, #0
 80012c4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80012c8:	f7ff fe98 	bl	8000ffc <RCC_APB2PeriphResetCmd>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40012c00 	.word	0x40012c00
 80012d8:	40000400 	.word	0x40000400
 80012dc:	40000800 	.word	0x40000800
 80012e0:	40000c00 	.word	0x40000c00
 80012e4:	40001000 	.word	0x40001000
 80012e8:	40001400 	.word	0x40001400
 80012ec:	40013400 	.word	0x40013400
 80012f0:	40014c00 	.word	0x40014c00
 80012f4:	40015000 	.word	0x40015000
 80012f8:	40015400 	.word	0x40015400
 80012fc:	40001800 	.word	0x40001800
 8001300:	40001c00 	.word	0x40001c00
 8001304:	40002000 	.word	0x40002000
 8001308:	40014000 	.word	0x40014000
 800130c:	40014400 	.word	0x40014400
 8001310:	40014800 	.word	0x40014800

08001314 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a2e      	ldr	r2, [pc, #184]	; (80013e4 <TIM_TimeBaseInit+0xd0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d013      	beq.n	8001358 <TIM_TimeBaseInit+0x44>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a2d      	ldr	r2, [pc, #180]	; (80013e8 <TIM_TimeBaseInit+0xd4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00f      	beq.n	8001358 <TIM_TimeBaseInit+0x44>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800133e:	d00b      	beq.n	8001358 <TIM_TimeBaseInit+0x44>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a2a      	ldr	r2, [pc, #168]	; (80013ec <TIM_TimeBaseInit+0xd8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d007      	beq.n	8001358 <TIM_TimeBaseInit+0x44>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <TIM_TimeBaseInit+0xdc>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d003      	beq.n	8001358 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <TIM_TimeBaseInit+0xe0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d108      	bne.n	800136a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001358:	89fb      	ldrh	r3, [r7, #14]
 800135a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800135e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	885a      	ldrh	r2, [r3, #2]
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	4313      	orrs	r3, r2
 8001368:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <TIM_TimeBaseInit+0xe4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00c      	beq.n	800138c <TIM_TimeBaseInit+0x78>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a21      	ldr	r2, [pc, #132]	; (80013fc <TIM_TimeBaseInit+0xe8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d008      	beq.n	800138c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001380:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	88da      	ldrh	r2, [r3, #6]
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	4313      	orrs	r3, r2
 800138a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	89fa      	ldrh	r2, [r7, #14]
 8001390:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	889a      	ldrh	r2, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	881a      	ldrh	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <TIM_TimeBaseInit+0xd0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00f      	beq.n	80013ca <TIM_TimeBaseInit+0xb6>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <TIM_TimeBaseInit+0xd4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00b      	beq.n	80013ca <TIM_TimeBaseInit+0xb6>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a12      	ldr	r2, [pc, #72]	; (8001400 <TIM_TimeBaseInit+0xec>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <TIM_TimeBaseInit+0xb6>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a11      	ldr	r2, [pc, #68]	; (8001404 <TIM_TimeBaseInit+0xf0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d003      	beq.n	80013ca <TIM_TimeBaseInit+0xb6>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a10      	ldr	r2, [pc, #64]	; (8001408 <TIM_TimeBaseInit+0xf4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d104      	bne.n	80013d4 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	7a1b      	ldrb	r3, [r3, #8]
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	829a      	strh	r2, [r3, #20]
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	40013400 	.word	0x40013400
 80013ec:	40000400 	.word	0x40000400
 80013f0:	40000800 	.word	0x40000800
 80013f4:	40000c00 	.word	0x40000c00
 80013f8:	40001000 	.word	0x40001000
 80013fc:	40001400 	.word	0x40001400
 8001400:	40014000 	.word	0x40014000
 8001404:	40014400 	.word	0x40014400
 8001408:	40014800 	.word	0x40014800

0800140c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 800142e:	e007      	b.n	8001440 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	b29a      	uxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	801a      	strh	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	807b      	strh	r3, [r7, #2]
 8001456:	4613      	mov	r3, r2
 8001458:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800145a:	787b      	ldrb	r3, [r7, #1]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	899b      	ldrh	r3, [r3, #12]
 8001464:	b29a      	uxth	r2, r3
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	4313      	orrs	r3, r2
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001470:	e009      	b.n	8001486 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	899b      	ldrh	r3, [r3, #12]
 8001476:	b29a      	uxth	r2, r3
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	43db      	mvns	r3, r3
 800147c:	b29b      	uxth	r3, r3
 800147e:	4013      	ands	r3, r2
 8001480:	b29a      	uxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	819a      	strh	r2, [r3, #12]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	891b      	ldrh	r3, [r3, #8]
 800149c:	b29b      	uxth	r3, r3
 800149e:	f023 0307 	bic.w	r3, r3, #7
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	811a      	strh	r2, [r3, #8]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 80014d4:	e007      	b.n	80014e6 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	801a      	strh	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	43db      	mvns	r3, r3
 8001500:	b29a      	uxth	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	821a      	strh	r2, [r3, #16]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001520:	2300      	movs	r3, #0
 8001522:	81bb      	strh	r3, [r7, #12]
 8001524:	2300      	movs	r3, #0
 8001526:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	8a1b      	ldrh	r3, [r3, #16]
 800152c:	b29a      	uxth	r2, r3
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	4013      	ands	r3, r2
 8001532:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	899b      	ldrh	r3, [r3, #12]
 8001538:	b29a      	uxth	r2, r3
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	4013      	ands	r3, r2
 800153e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001540:	89bb      	ldrh	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <TIM_GetITStatus+0x42>
 8001546:	897b      	ldrh	r3, [r7, #10]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	43db      	mvns	r3, r3
 8001572:	b29a      	uxth	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	821a      	strh	r2, [r3, #16]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
	...

08001584 <__libc_init_array>:
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	2600      	movs	r6, #0
 8001588:	4d0c      	ldr	r5, [pc, #48]	; (80015bc <__libc_init_array+0x38>)
 800158a:	4c0d      	ldr	r4, [pc, #52]	; (80015c0 <__libc_init_array+0x3c>)
 800158c:	1b64      	subs	r4, r4, r5
 800158e:	10a4      	asrs	r4, r4, #2
 8001590:	42a6      	cmp	r6, r4
 8001592:	d109      	bne.n	80015a8 <__libc_init_array+0x24>
 8001594:	f000 f81a 	bl	80015cc <_init>
 8001598:	2600      	movs	r6, #0
 800159a:	4d0a      	ldr	r5, [pc, #40]	; (80015c4 <__libc_init_array+0x40>)
 800159c:	4c0a      	ldr	r4, [pc, #40]	; (80015c8 <__libc_init_array+0x44>)
 800159e:	1b64      	subs	r4, r4, r5
 80015a0:	10a4      	asrs	r4, r4, #2
 80015a2:	42a6      	cmp	r6, r4
 80015a4:	d105      	bne.n	80015b2 <__libc_init_array+0x2e>
 80015a6:	bd70      	pop	{r4, r5, r6, pc}
 80015a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ac:	4798      	blx	r3
 80015ae:	3601      	adds	r6, #1
 80015b0:	e7ee      	b.n	8001590 <__libc_init_array+0xc>
 80015b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b6:	4798      	blx	r3
 80015b8:	3601      	adds	r6, #1
 80015ba:	e7f2      	b.n	80015a2 <__libc_init_array+0x1e>
 80015bc:	080015e4 	.word	0x080015e4
 80015c0:	080015e4 	.word	0x080015e4
 80015c4:	080015e4 	.word	0x080015e4
 80015c8:	080015e8 	.word	0x080015e8

080015cc <_init>:
 80015cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ce:	bf00      	nop
 80015d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015d2:	bc08      	pop	{r3}
 80015d4:	469e      	mov	lr, r3
 80015d6:	4770      	bx	lr

080015d8 <_fini>:
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015da:	bf00      	nop
 80015dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015de:	bc08      	pop	{r3}
 80015e0:	469e      	mov	lr, r3
 80015e2:	4770      	bx	lr
